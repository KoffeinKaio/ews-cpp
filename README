                                     README
                                     ======

                              Supported Compilers
                              -------------------

* Clang 3.5 with libc++
* GCC 4.8 with libstdc++
* Visual Studio 2013


                             Run-time Dependencies
                             ---------------------

* libcurl, at least version 7.22


                               Note Windows Users
                               ------------------

You can obtain an up-to-date and easy-to-use binary distribution of libcurl
from here:

    http://www.confusedbycode.com/curl/

Additionally, you probably need to tell CMake where to find it. Just set
CMAKE_PREFIX_PATH to the path where you installed libcurl (e.g.
C:\Program Files\cURL) and re-configure.


                                  Source Code
                                  -----------

ews-cpp's source code is available as a Git repository. To obtain it, type

    $ git clone git@repository.otris.de:kircher/ews-cpp.git


                                    Building
                                    --------

The library is header-only. So there is no need to build anything. Just copy the
`include/ews/` directory wherever you may like.

To build the accompanied tests with debugging symbols and address sanitizer
enabled do something like this:

    $ cmake -DCMAKE_BUILD_TYPE=Debug -DENABLE_ASAN=ON path/to/source/
    $ make

Type `make help` to see more configuration options.


                                   Test Suite
                                   ----------

Export the following environment variables in order to run individual examples
or the test suite.

EWS_TEST_DOMAIN
EWS_TEST_USERNAME
EWS_TEST_PASSWORD
EWS_TEST_URI

Once you've build the project, you can run the test suite with

    $ ./tests


                                  Design Notes
                                  ------------

ews-cpp is written in a "modern C++" way:

* C++ Standard Library, augmented with rapidxml for XML parsing
* Smart pointers instead of raw pointers
* Pervasive RAII idiom
* Handle errors using C++ exceptions
* Coding conventions inspired by Boost


                                      API
                                      ---

Just add

    #include <ews/ews.hpp>

to your include directives and you are good to go.

Take a look at the `examples/` directory to get an idea of how the API feels.
From 10.000ft it looks like this:

        +------+
        |a task|  +---------+
        +------+  |a message|
                  +---------+
       +---------------+
       |a calendar item| +---+
       +---------------+     |
     +------------+          |
     |another task|          |
     +------------+          v

                    +-----------------
                    |service instance|
                    +--------+-------+
                             |
      â€‰                      |
                             |
                       The Internet
                             |
                             |
                             v

                           +---+
                           |EWS|
                           +---+
                      +--------------+
                      |Exchange Store|
                      +--------------+

You have items and you have _the_ service. You use the service whenever you want
to talk to the Exchange server.

Please note one important caveat though. ews-cpp's API is designed to be
"blocking". This means whenever you call one of the service's member functions
to talk to an Exchange server that call blocks until it receives a request from
the server. And that may, well, just take forever (actually until a timeout is
reached). You need to keep this in mind in order to not block your main thread.

Implications of this design choice

Pros:
* A blocking API is much easier to use and understand

Cons:
* You just might accidentally block your UI thread
* You cannot issue thousands of EWS requests asynchronously simply because you
  cannot spawn thousands of threads in your process. You may need additional
  effort here

# vim:et sw=4 ts=4
